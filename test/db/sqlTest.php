<?php
/**
 * Created by PhpStorm.
 * User: Vea
 * Date: 2019/03/26 026
 * Time: 09:33
 */

use PHPUnit\Framework\TestCase;

class sqlTest extends TestCase{
	use \nx\parts\db\pdo;
	protected function setUp(){
		parent::setUp(); // TODO: Change the autogenerated stub
	}
	public function selectSQL($sql, array $params=[], $config='default'){
		return [[$sql, $params, $config]];
	}
	/**
	 * @param        $name
	 * @param string $primary
	 * @param null   $db
	 * @return \nx\helpers\db\sql
	 */
	public function table($name, $primary='id', $db=null){
		return new \nx\helpers\db\sql($name, $primary, $db);
	}
	public function testWork(){

		$db =new \nx\helpers\db\pdo();
		$sql =$db->sql();

		//$user =\nx\helpers\db\sql::table('user');
		//$info =\nx\helpers\db\sql::table('info i');
		$user =$sql::table('user');
		$info =$sql::table('info i');

		//echo $sql->from($user)->where()->select();

		//$result =$sql->from($user, $info)->where()->select()->execute();

		//echo $sql->select($user['id'], $info['name'])->from($user, $info)->where($info['id']->equal(1));


		//echo $sql->from($user)->where(1)->select($sql(123), 'id', 'name');
		//echo "\n";
		//
		//echo $sql->from($info)->where(1)->select($sql(123), 'id', 'name');
		//echo "\n";
		//
		//echo $sql->from($user)->select(1, '123', 'abc', $user['id'], $user['name']->as('n'));
		//echo "\n";
		//
		//echo $sql->from($user)->where($user['id']->equal(1))->select();
		//echo "\n";
		//echo $sql->from($user)->where($user['createdAt']->TIMESTAMP()->YEAR()->equal(2019), $user['id']->equal(2))->select();
		//echo "\n";
		//$info =$this->table('info');

		//echo $sql->from($user, $info)->where(1)->select($user['*']->COUNT());
		//echo "\n";
		//echo $sql->limit(1,10)->select();
		//echo "\n";
		//echo $sql->page(3,10)->select();
		//echo "\n";

		echo $sql->from($user, $info)->select()->group('id')->having($user['id']->gt(1));
		echo "\n";


		//$count =$sql->from($user)->where(1)->select($user['*']->COUNT())->execute();
		//if($count>0){
		//	$result =$sql->limit(1,10)->select();
		//}
		//return [$count, $result];

	}
	public function testUpdate(){
		$db =new \nx\helpers\db\pdo();
		$sql =$db->sql();

		//$user =\nx\helpers\db\sql::table('user');
		//$info =\nx\helpers\db\sql::table('info i');
		$user =$sql::table('user');
		$info =$sql::table('info i');

		$sql->from($user)->where(1)->update(['id'=>1, 'name'=>'vea']);
		$this->assertEquals('UPDATE `user`  SET `user`.`id` = ?, `user`.`name` = ? WHERE 1', (string)$sql);
		$this->assertEquals([1, 'vea'], $sql::$params);

		$sql->from($user)->where(1)->update(['id'=>1, 'name'=>'vea']);
		$this->assertEquals('UPDATE `user`  SET `user`.`id` = ?, `user`.`name` = ? WHERE 1', (string)$sql);
		$this->assertEquals([1, 'vea'], $sql::$params);

		$sql->from($info)->where(1)->update(['id'=>1, 'password'=>$info['salt']->MD5(2)]);
		$this->assertEquals('UPDATE `info` `i`  SET `i`.`id` = ?, `i`.`password` = MD5(`i`.`salt`, ?) WHERE 1', (string)$sql);
		$this->assertEquals([1, 2], $sql::$params);

		$sql->from($user,$info)->where($info['id']->equal(123))->update(['id'=>1, 'password'=>$info['salt']->MD5(2)]);
		$this->assertEquals('UPDATE `user`, `info` `i`  SET `user`.`id` = ?, `user`.`password` = MD5(`i`.`salt`, ?) WHERE `i`.`id` = ?', (string)$sql);
		$this->assertEquals([1, 2, 123], $sql::$params);

		$sql->from($user)->where(1)->update(['id'=>1, 'name'=>'vea'])->sort(['id'=> 'desc'])->limit(1);
		$this->assertEquals('UPDATE `user`  SET `user`.`id` = ?, `user`.`name` = ? WHERE 1 ORDER BY `user`.`id` DESC LIMIT 1', (string)$sql);
		$this->assertEquals([1, 'vea'], $sql::$params);

	}
	public function testInsert(){
		$db =new \nx\helpers\db\pdo();
		$sql =$db->sql();

		//$user =\nx\helpers\db\sql::table('user');
		//$info =\nx\helpers\db\sql::table('info i');
		$user =$sql::table('user');
		$info =$sql::table('info i');

		$sql->from($user)->create(['id'=>1, 'name'=>'vea']);
		$this->assertEquals((string)$sql, 'INSERT INTO `user` (`id`, `name`) VALUES (?, ?)');
		$this->assertEquals([[1, 'vea']], $sql::$params);

		$sql->from($info)->create([['id'=>1, 'name'=>'vea'],['id'=>2, 'name'=>'f0']]);
		$this->assertEquals((string)$sql, 'INSERT INTO `info` (`id`, `name`) VALUES (?, ?)');
		$this->assertEquals([[1, 'vea'], [2, 'f0']], $sql::$params);
	}
	public function testSelect(){
		$db =new \nx\helpers\db\pdo();
		$sql =$db->sql();

		//$user =\nx\helpers\db\sql::table('user');
		//$info =\nx\helpers\db\sql::table('info i');
		$user =$sql::table('user');
		$info =$sql::table('info i');

		$sql->from($info)->where($info['createdAt']->TIMESTAMP($info['1'])->YEAR($info(2))->equal("3"), $info['id']->equal(4));
		$this->assertEquals('SELECT * FROM `info` `i` WHERE YEAR(TIMESTAMP(`i`.`createdAt`, `i`.`1`), ?) = ? AND `i`.`id` = ?', (string)$sql);
		$this->assertEquals([2,"3",4], $sql::$params);
	}
	public function testDelete(){
		$db =new \nx\helpers\db\pdo();
		$sql =$db->sql();

		//$user =\nx\helpers\db\sql::table('user');
		//$info =\nx\helpers\db\sql::table('info i');
		$user =$sql::table('user');
		$info =$sql::table('info i');

		$sql->from($user)->where($user['id']->equal(1))->delete();
		$this->assertEquals('DELETE FROM `user` WHERE `user`.`id` = ?', (string)$sql);
		$this->assertEquals([1], $sql::$params);
	}
	public function testWork2(){

		
/**
 * $data = Array (
'login' => 'admin',
'active' => true,
'firstName' => 'John',
'lastName' => 'Doe',
'password' => $db->func('SHA1(?)',Array ("secretpassword+salt")),//todo
// password = SHA1('secretpassword+salt')
'createdAt' => $db->now(),
// createdAt = NOW()
'expires' => $db->now('+1Y')//todo
// expires = NOW() + interval 1 year
// Supported intervals [s]econd, [m]inute, [h]hour, [d]day, [M]onth, [Y]ear
);
 *
 */
		//todo 1.是否要把数据库操作逻辑封装到db中再注入到$this中
		
		$db =$this->db($dbset ='default');
		//
		//$db->insert('INSERT INTO `user` (`id`, `name`) VALUES (?, ?)', [1, 'vea']);
		//$db->insert($db->from('user')->create(['id'=>1, 'name'=>'vea']));
		//
		//$db->from('user')->insert(['id'=>1, 'name'=>'vea']);
		//$db->from('user')->create(['id'=>1, 'name'=>'vea']);
		//
		//$db->select('SELECT `user`.`id`, `user`.`name` FROM `user` WHERE `user`.`id` = ?', [1]);
		//$db->select($db->from('user')->where(['id'=>1])->limit(1)->select('id' ,'name'));
		//
		//
		//$db->from('user')->where(['id'=>1])->limit(1)->select('id' ,'name')->read();
		//
		//
		//$db->from('user')->create(['id'=>1, 'name'=>'vea']);//返回插入id
		//$db->from('user')->where(['id'=>1])->first('id' ,'name');//todo 是否返回对数组处理的对象
		//$db->from('user')->where(['id'=>1])->read('id' ,'name');
		//$db->from('user')->where(1)->delete();
		//$db->from('user')->delete(1);//todo 移除这种写法？
		//$db->from('user')->where(1)->update(['name'=>'vea']);//todo update 函数写法
		//
		////'password' => $db->func('SHA1(?)',Array ("secretpassword+salt"))
		//$db->from('user')->where(1)->update(['password'=>['sha1', '`secretpassword`+`salt`']]);
		//$db->from('user')->where(1)->update(['password'=>'sha1(`secretpassword`+`salt`)']);
		//$db->from('user')->where(1)->update(['password'=>['custom', 'sha1(`secretpassword`+`salt`)']]);
		//
		////"update `user` where `id` =1 set `coin` =`coin` +1";
		//$db->from('user')->where(1)->update(['coin'=>['+', 1]]);//todo update 函数写法
		//
		//$db->from('user')
		//	->limit(1)
		//	->page(1)
		//	->sort(1)
		//	->orderBy()//移除
		//	->group()
		//	->groupBy()//移除
		//	->where()
		//	->join();
		//
		//$db->from('user')
		//	->where(['id'=>1])
		//	->limit(1)
		//	->select('id' ,'name')//todo select 函数写法
		//	->join($db->from('user_info')->select(), ['user_id'=>'id'])
		//	->join($db->from('user_info')->select(), ['user_id'=>'id'])
		//	->read();
		

		//todo 2. 合并table到db中,改名为sql
		$db->from('user')->select();

		//todo 是否继承之前的查询条件 暂 不继承
		$table =$db->from('user');
		$table2 =$db->from('user_info');

		//SELECT IFNULL(`status`>0,2,3) as `xx`;
		$table->select($table::IFNULL($table['status']->gt(0), 2, 3));

		//FUNC(arg1, arg2, ...):FUNC
		//FIELD(field)->op():RESULT
		//RESULT->as():RESULT

		$table->select(
			'id',
			$table['name'],
			$table['name']->as('xx'),
			$table2::COUNT('*')->as('count'),
			$table2('*')->COUNT()->as('count')
		);
		//select count(*) from log where year(unix_stamp(`createdAt`))=2018
		$table::equal($table::YEAR($table::UNIX_TIMESTAMP($table['createAt'])), 2018);
		$table::UNIX_TIMESTAMP()->YEAR()->as('year');
		$table('abc')->UPPER()->SUBSTR()->as();
		$table['createAt']->UNIX_TIMESTAMP()->YEAR()->equal(2018)->as();

		//$table('asdf')->split('')->join(',');

			//join(split('asdf', ''), ',');
		//implode(',', explode('', 'asdf'));
		//'asdf'->explode('' )->implode(',');


		//select count(*) from log where `createdAt`>2018
		//$table['createAt']->equal(2018);

		//=('createdAt', 2018);
		//'createdAt'->=(2018);
		//'createdAt' = 2018;

		//'a' LIKE 'b';
		//'a'->like('b');
		//like('a', 'b');


		//$table->where(
		//	$table::gt($table['id'], 1),
		//
		//	$table['id']->gt(1)->or(
		//		$table['id']->gt(2)
		//			), $table['id']->gt(2)
		//); // COUNT(*) =0

		//$table->update(
		//	$table['sales_id']->set($table2['id']),
		//	$table['createdAt']->set($table::NOW),
		//	$table['count']->set($table::COUNT($table2['*']))
		//);

		$table->update(['sales_id'=>'`sales`.`id`']);
		$table->update([
			'sales_id'=>$table2['id'],
			'createdAt'=>$table::NOW,
			'count'=>$table::COUNT($table2['*']),
		]);
		//$table->update($table2['id']->as('sales_id'));

		$table->where(
			1,
			$table['id']->like('%app_')
		);
		$table->where(
			$table['id']->like('%app_')
		); //table.id like "%app_"
		$table->where(
			$table::COUNT('*')->eq(0)
		); // COUNT(*) =0

		$table('id')->eq(1);
		$table->field('id')->eq(1);


		$table->select(['id', 'name']);
		$table->select(['user_id'=>'id', 'name']);//todo 区分 select where update   select([AS => FIELD])
		$table->select(['count_user'=>['count', '*']]);//无法区分参数和字段 <- mysql 函数封装？
		$table->select(['no'=>['contact', 'vms-', '`year`', '`month`', '`user_info`.`day`']]);//无法区分参数和字段 <- mysql 函数封装？
		//$table->select(['table1'=>['id', 'name'], 'table2'=>['id', 'name'=>'table2_name']]);//无法区分参数和字段 <- mysql 函数封装？
		//todo 针对联合查询等多表情况下，查询需要补充表名
		$table->join('user_info i');


		//$table->where(1);//primary
		//$table->where(['id'=>1]);
		//$table->where(['id'=>['>', 1]]);
		//$table->where(['id'=>['>', 1]], 'and');
		//
		//$table
		//	->where([
		//		['id', '>', 1], //[FIELD(-AS), RULE, ARGS, ...]
		//		['or', 'status', '=', 0],//[[CONDS], FIELD(-AS), RULE, ARGS, ...]
		//	])
		//	->where([
		//		'id'=>1,//FIELD =>ARG1 -> FIELD =>['=', ARG1]
		//		'status'=>['>', 0],
		//		'name'=>['like', 'a'],
		//		'u.name'=>['like', 'a'],//<--- or todo join表名和别名逻辑
		//		'u.name1'=>$table::like('a'),
		//		'u.name2'=>$table::eq('a'),
		//	], 'AND'); //id=1 and status >0 or user.name like %a%

		//select * from user where updatedAt =createdAt
		//$table->where(['updatedAt'=>'`createdAt`']);
		//$table->where(['updatedAt'=>':createdAt']);
		////$table->where(['updatedAt'=>$table2->field('createdAt')]);// =>object field{table:$table2}
		//$table->where(['updatedAt'=>$table2['createdAt']]);// =>object field{table:$table2}
		//
		////$table->where(['updatedAt'=>$table::contact->args('vms-', $table->field('year'), $table->field('month'), $table2->field('day'))]);// =>object field{table:$table2}
		//$table->where(['updatedAt'=>$table::CONTACT('vms-', $table['year'], $table['month'], $table2['day'])]);// =>object field{table:$table2}
		//$table->where(['updatedAt'=>$table::COUNT('*')]);
		//
		////select * from user where updatedAt >createdAt
		//$table->where(['updatedAt'=>['>', '`createdAt`']]);
		//$table->where(['updatedAt'=>['>', ':createdAt']]);
		//$table->where(['updatedAt'=>['>', $table2['createdAt']]]);


		//[FIELD, RULE, ARG1, ARG2, ...]
		//FIELD =>[RULE, ARG1, ARG2, ...]



		//$table->join($table2->select('id', 'name'))->select()->read();
		//select table1.*, table2.id, table2.name




		//$db->select($db->from());

	}
}